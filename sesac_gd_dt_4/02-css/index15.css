/* 
    Animation
    - animation-name: @keyframes 애니메이션 이름 지정
        - 시작 : from or 0%
        - 중간 : 0 ~ 100%
        - 끝 : to or 100%

    - animation-duration : 애니메이션이 한 번 재생되는 데 걸리는 시간을 지정. (단위 : s)
    - animation-delay : 애니메이션이 시작되기 전에 기다리는 시간을 지정. (단위 : s)
    - animation-iteration-count : 애니메이션 반복 횟수 (default: 1, infinite: 무한 반복)
    - animation-timing-function : 애니메이션의 속도 변화를 지정.
        - linear, ease, ease-in, ease-out, ease-in-out 등등.
    - animation-direction : 애니메이션의 방향을 지정.
        - normal(=default), reverse(반대 방향), alternate(반복될때마다 방향 바꿔줌), alternate-reverse
        - alternate: from -> to 방향으로 애니메이션 진행 -> (다음 회차) to -> from 방향을 바꿔가며 반복.
*/

.box {
    width: 100px;
    height: 100px;
    background-color: aqua;
    position: relative;

    animation-name: damon;
    animation-duration: 2s;
    animation-delay: 1s;
    animation-iteration-count: infinite;
    animation-timing-function: ease-in-out;
}

/* damon : 애니메이션의 이름 (개발자 마음대로) */
@keyframes damon {
    0% {
        left: 0px;
    }

    25% {
        left: 200px;
    }

    50% {
        left: 400px;
    }

    75% {
        left: 200px;
    }

    100% {
        left: 0px;
    }
}

/* ex2 */
.bounce-ball1 {
    position: relative;
    width: 100px;
    height: 100px;
    background-color: brown;
    border-radius: 50%;
    left: 100px;
    top: 0;

    /* animation-name: bounce1;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    animation-iteration-count: infinite;
    animation-direction: alternate; */

    /* 애니메이션 단축 프로퍼티 */
    animation: bounce1 1s ease-out infinite alternate ;
}

@keyframes bounce1 {
    to {
        top: 50px;
    }

    from {
        top: 300px;
    }
}

.bounce-ball2 {
    width: 50px;
    height: 50px;
    background-color: tomato;
    border-radius: 50%;
    position: absolute;

    animation: bounce2 2s infinite;
}

@keyframes bounce2 {
    from, to {
        bottom: 0px;
        animation-timing-function: ease-out;
        /* 0px에서 정상속도로 시작 -> 속도 줄이면서 300px 됨.  */
    }
    50% {
        bottom: 300px;
        animation-timing-function: ease-in;
        /* 300px에서 천천히 시작되어 -> 0px로 가면서 정상속도로 끝. */
    }
}

/* 
    Tip)
    * from에서 to로의 애니메이션 (정방향 애니메이션) (from ~ to)

    - from은 애니메이션의 시작 상태를 나타냅니다.
    - to는 애니메이션의 종료 상태를 나타냅니다.
    이러한 경우 애니메이션은 from 상태에서 시작하여 to 상태로 종료한다.

    * to에서 from으로의 애니메이션 (역방향 애니메이션) (to ~ from)

    - to는 애니메이션의 시작 상태를 나타냅니다.
    - from은 애니메이션의 종료 상태를 나타냅니다.
    이러한 경우 애니메이션은 to 상태에서 시작하여 from 상태로 종료한다.
*/

/* 실습 */
.ball{
    background: linear-gradient(rgb(0, 0, 0), rgb(255, 255, 255));
    width: 100px;
    height: 100px;
    border-radius: 50px; /* 테두리 둥글게 설정 */
    position: fixed; /* 공의 위치를 화면에 고정하여 애니메이션 이동 시 화면 기준으로 유지 */
    animation-name: ball;
    animation-duration: 3s; /* 애니메이션 진행 길이 */
    animation-iteration-count: infinite; /* 애니메이션 무한 반복 */
    /* 애니메이션이 일정한 속도로 진행되도록 설정 */
    animation-timing-function: linear;


}

@keyframes ball {
    0% {
        transform: translate(0vw,0vh);

    }
    25% {
        transform: translate(calc(100vw - 100px),0vh);

    }
    50% {
        transform: translate(calc(100vw - 100px),calc(100vh - 100px)); 
    }
    75% {
        transform: translate(0vw, calc(100vh - 100px)); 
    }
    100% {
        transform: translate(0vw, 0vh); 
    }
}

.contents{
    width: 200%;
    position: absolute;
    animation: content1 2s ease-in-out 2s 1;
}
@keyframes content1{
   from{
    left: 100%;
   }
   70%{
    width: 200%;
   }
   to{
    left: 0%;
    width: 100%;
   }
}