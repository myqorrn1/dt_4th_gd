.boy {
    background-color: lightblue;
    width: 300px;
    height: 300px;

    position: absolute;
    left: 100px;
}

img {
    width: 100%;
    height: 100%;
}

img:hover {
    /* 
        transform 속성
        - 요소의 모양, 크기, 위치 등을 변경하는데 사용.
    */

    /* 
        #1. skew()
        - 원하는 각도 만큼 기울이기
        - x, y 축 나누어 속성 부여 가능
            - skewX(x_deg)
            - skewY(y_deg)
        - x, y 동시 사용 원하는 경우
        - skew(x_deg,y_deg)

    */
    transform: skewX(30deg);
    transform: skewY(-30deg);
    transform: skew(30deg, -30deg);

    /* 
        #2. scale()
        - 크기 확대, 축소
        - 1보다 큼 : 확대
        - 0~1: 축소 = 0.n 만큼 확대

    */
    transform: scaleX(2);
    transform: scaleY(2);
    transform: scale(0.5);
    transform: scale(2, 0.5);

    /* 
        #3. rotate()
        - 회전
        - 주어진 각도만큼 회전
        - rotateX() : x 축을 기준으로 회전.
        - rotateY() : y 축을 기준으로 회전.
        - rotate() : 시계방향으로 회전.

        - 뒷면 안보이게
        - backface-visibility : hidden;
    */

    transform: rotateX(45deg);
    transform: rotateY(60deg);
    transform: rotate(80deg);

    transform: rotateY(180deg);
    backface-visibility: hidden;

    /* 
        #4. translate()
        - 이동
        - translateX() : x축을 기준으로 이동.
        - translateY() : y축을 기준으로 이동.
        - translate() : x,y 축을 기준으로 이동.
    */
    transform: translateX(-70px);
    transform: translateY(30px);
    transform: translate(30px, 30px);
    transform: translate(-30px, -30px);

    /* 
        transition 속성
        - CSS 요소의 속성값이 변화 할때 일정시간 동안 부드럽게 변화가 일어나도록 설정.
        - transform 속성과 함께 자주 쓰인다.
    */
    transform: scale(1.2);
    transition: 1s;
    /* 이미지가 변환할때 1초동안 부드럽게 변환됨! */

    /* transition 보충 설명 */
    /* 
    * transition: 1s;
    - 간단히 모든 속성에 트랜지션을 적용하고 싶을 때 사용.
    - 변경 대상 속성이 많거나, 다양할 경우 적합.

    * transition: transform 1s;
    - 성능 최적화를 위해 특정 속성에만 트랜지션을 적용하고 싶을 때 사용.
    - 필요 없는 속성에는 트랜지션 효과가 적용되지 않도록 세밀하게 조정.
*/
}

/* 간단 실습 */
.outer {
    background-color: lightblue;
    width: 300px;
    height: 300px;
}
.inner {
    background-color: mediumaquamarine;
    width: 100px;
    height: 100px;
}
.outer1 {
    position: relative;
}
.inner1 {
    position: absolute;
    /* top: 100px;
    left: 100px; */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}
.outer2 {
    display: flex;
    justify-content: center;
    align-items: center;
}
/* .div1{
    width: 1000px;
    position: relative;
}
.img{
    position: absolute;
    width: 300px;
    height: 300px;
    transform: skew(30deg);
}
.img1{
    top: 100px;
    z-index: 3;
}
.img2{
    top: 50px;
    left: 100px;
    z-index: 2;
}
.img3{
    z-index: 1;
    left: 200px;
} */

.trans {
    background-color: lightblue;
    width: 100px;
    height: 100px;
    border: 1px solid black;
}
.tf1:hover {
    width: 200px;
    transition: 1s;
}
.tf2:hover {
    transform: skew(-30deg) translate(30px);
    transition: 1s;
}
.tf3:hover {
    transform: translate(300px) rotate(360deg);
    transition: 1.5s;
    border-radius: 50px;
    background-color: red;
}
.tf4:hover {
    transform: scale(1.5) rotateY(360deg);
    transition: 1.5s;
    background-color: yellow;
}
